"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var card_io_common_1 = require("./card-io.common");
var CardIODelegate = (function (_super) {
    __extends(CardIODelegate, _super);
    function CardIODelegate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CardIODelegate.initWithOwner = function (owner) {
        var delegate = CardIODelegate.new();
        delegate._owner = owner;
        return delegate;
    };
    CardIODelegate.prototype.userDidCancelPaymentViewController = function (paymentViewController) {
        console.log('Inside');
        paymentViewController.dismissViewControllerAnimated(true, null);
    };
    CardIODelegate.prototype.userDidProvideCreditCardInfoInPaymentViewController = function (cardInfo, paymentViewController) {
        paymentViewController.dismissViewControllerAnimated(true, null);
    };
    CardIODelegate.ObjCProtocols = [CardIOPaymentViewControllerDelegate];
    return CardIODelegate;
}(NSObject));
var CardIo = (function (_super) {
    __extends(CardIo, _super);
    function CardIo() {
        var _this = _super.call(this) || this;
        CardIOUtilities.preload();
        return _this;
    }
    CardIo.prototype.scan = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var delegate = CardIODelegate.initWithOwner(new WeakRef(_this));
            var scanViewController = CardIOPaymentViewController.alloc().initWithPaymentDelegate(delegate);
            scanViewController.modalPresentationStyle = UIModalPresentationFormSheet;
            rootVC().presentViewControllerAnimatedCompletion(scanViewController, true, resolve);
        });
    };
    return CardIo;
}(card_io_common_1.Common));
exports.CardIo = CardIo;
var rootVC = function () {
    var appWindow = UIApplication.sharedApplication.keyWindow;
    return appWindow.rootViewController;
};
//# sourceMappingURL=card-io.ios.js.map
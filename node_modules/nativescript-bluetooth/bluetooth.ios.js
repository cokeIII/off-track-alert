"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bluetooth_common_1 = require("./bluetooth.common");
var CBPeripheralDelegateImpl = (function (_super) {
    __extends(CBPeripheralDelegateImpl, _super);
    function CBPeripheralDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CBPeripheralDelegateImpl.new = function () {
        return _super.new.call(this);
    };
    CBPeripheralDelegateImpl.prototype.initWithCallback = function (owner, callback) {
        this._owner = owner;
        this._callback = callback;
        this._services = [];
        this._servicesWithCharacteristics = [];
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.initWithCallback ---- owner: " + owner.get() + " ---- callback: " + callback);
        return this;
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidDiscoverServices = function (peripheral, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidDiscoverServices ---- peripheral: " + peripheral + ", " + error + ", " + this + ", " + this._services);
        for (var i = 0; i < peripheral.services.count; i++) {
            var service = peripheral.services.objectAtIndex(i);
            this._services.push({
                UUID: service.UUID.UUIDString
            });
            peripheral.discoverCharacteristicsForService(null, service);
        }
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidDiscoverIncludedServicesForServiceError = function (peripheral, service, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidDiscoverIncludedServicesForServiceError ---- peripheral: " + peripheral + ", service: " + service + ", error: " + error);
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidDiscoverCharacteristicsForServiceError = function (peripheral, service, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidDiscoverCharacteristicsForServiceError ---- peripheral: " + peripheral + ", service: " + service + ", error: " + error);
        if (error) {
            return;
        }
        var characteristics = [];
        for (var i = 0; i < service.characteristics.count; i++) {
            var characteristic = service.characteristics.objectAtIndex(i);
            var result = {
                serviceUUID: service.UUID.UUIDString,
                UUID: characteristic.UUID.UUIDString,
                name: characteristic.UUID,
                value: characteristic.value ? characteristic.value.base64EncodedStringWithOptions(0) : null,
                properties: this._getProperties(characteristic),
                isNotifying: characteristic.isNotifying
            };
            characteristics.push(result);
            for (var j = 0; j < this._services.length; j++) {
                var s = this._services[j];
                if (s.UUID === service.UUID.UUIDString) {
                    s.characteristics = characteristics;
                    this._servicesWithCharacteristics.push(s);
                    this._services.splice(j, 1);
                    break;
                }
            }
        }
        if (this._services.length === 0) {
            if (this._callback) {
                var UUID = peripheral.identifier.UUIDString;
                this._callback({
                    UUID: UUID,
                    name: peripheral.name,
                    state: this._owner.get()._getState(peripheral.state),
                    services: this._servicesWithCharacteristics,
                    advertismentData: this._owner.get()._advData[UUID]
                });
                this._callback = null;
                delete this._owner.get()._advData[UUID];
            }
        }
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidDiscoverDescriptorsForCharacteristicError = function (peripheral, characteristic, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidDiscoverDescriptorsForCharacteristicError ---- peripheral: " + peripheral + ", characteristic: " + characteristic + ", error: " + error);
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidDiscoverDescriptorsForCharacteristicError ---- characteristic.descriptors: " + characteristic.descriptors);
        for (var i = 0; i < characteristic.descriptors.count; i++) {
            var descriptor = characteristic.descriptors.objectAtIndex(i);
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidDiscoverDescriptorsForCharacteristicError ---- char desc UUID: " + descriptor.UUID.UUIDString);
        }
        if (this._services.length === this._servicesWithCharacteristics.length) {
            if (this._callback) {
                this._callback({
                    UUID: peripheral.identifier.UUIDString,
                    name: peripheral.name,
                    state: this._owner.get()._getState(peripheral.state),
                    services: this._services
                });
                this._callback = null;
            }
        }
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidUpdateValueForCharacteristicError = function (peripheral, characteristic, error) {
        if (!characteristic) {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.warning, "CBPeripheralDelegateImpl.peripheralDidUpdateValueForCharacteristicError ---- No CBCharacteristic.");
            return;
        }
        if (error !== null) {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, "CBPeripheralDelegateImpl.peripheralDidUpdateValueForCharacteristicError ---- " + error);
            return;
        }
        var result = {
            type: characteristic.isNotifying ? 'notification' : 'read',
            characteristicUUID: characteristic.UUID.UUIDString,
            ios: characteristic.value,
            value: toArrayBuffer(characteristic.value)
        };
        if (result.type === 'read') {
            if (this.onReadCallbacks && this.onReadCallbacks.length > 0) {
                this.onReadCallbacks.shift()(result);
            }
            else {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'No _onReadPromise found!');
            }
        }
        else {
            if (this.onNotifyCallback) {
                this.onNotifyCallback(result);
            }
            else {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, '----- CALLBACK IS GONE -----');
            }
        }
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidUpdateValueForDescriptorError = function (peripheral, descriptor, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidUpdateValueForDescriptorError ---- peripheral: " + peripheral + ", descriptor: " + descriptor + ", error: " + error);
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidWriteValueForCharacteristicError = function (peripheral, characteristic, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidWriteValueForCharacteristicError ---- peripheral: " + peripheral + ", characteristic: " + characteristic + ", error: " + error);
        if (this.onWriteCallbacks && this.onWriteCallbacks.length > 0) {
            this.onWriteCallbacks.shift()({
                characteristicUUID: characteristic.UUID.UUIDString
            });
        }
        else {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.warning, 'CBPeripheralDelegateImpl.peripheralDidWriteValueForCharacteristicError ---- No _onWritePromise found!');
        }
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidUpdateNotificationStateForCharacteristicError = function (peripheral, characteristic, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidUpdateNotificationStateForCharacteristicError ---- peripheral: " + peripheral + ", characteristic: " + characteristic + ", error: " + error);
        if (error) {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, "CBPeripheralDelegateImpl.peripheralDidUpdateNotificationStateForCharacteristicError ---- " + error);
        }
        else {
            if (characteristic.isNotifying) {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidUpdateNotificationStateForCharacteristicError ---- Notification began on " + characteristic);
            }
            else {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidUpdateNotificationStateForCharacteristicError ---- Notification stopped on  " + characteristic + ", consider disconnecting");
            }
        }
    };
    CBPeripheralDelegateImpl.prototype.peripheralDidWriteValueForDescriptorError = function (peripheral, descriptor, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl.peripheralDidWriteValueForDescriptorError ---- peripheral: " + peripheral + ", descriptor: " + descriptor + ", error: " + error);
    };
    CBPeripheralDelegateImpl.prototype._getProperties = function (characteristic) {
        var props = characteristic.properties;
        return {
            broadcast: (props & 1) === 1,
            read: (props & 2) === 2,
            broadcast2: (props & 1) === 1,
            read2: (props & 2) === 2,
            write: (props & 8) === 8,
            writeWithoutResponse: (props & 4) === 4,
            notify: (props & 16) === 16,
            indicate: (props & 32) === 32,
            authenticatedSignedWrites: (props & 64) === 64,
            extendedProperties: (props & 128) === 128,
            notifyEncryptionRequired: (props & 256) === 256,
            indicateEncryptionRequired: (props & 512) === 512
        };
    };
    CBPeripheralDelegateImpl.prototype._getDescriptors = function (characteristic) {
        var descs = characteristic.descriptors;
        var descsJs = [];
        for (var i = 0; i < descs.count; i++) {
            var desc = descs.objectAtIndex(i);
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBPeripheralDelegateImpl._getDescriptors ---- descriptor value: " + desc.value);
            descsJs.push({
                UUID: desc.UUID.UUIDString,
                value: desc.value
            });
        }
        return descsJs;
    };
    CBPeripheralDelegateImpl.ObjCProtocols = [CBPeripheralDelegate];
    return CBPeripheralDelegateImpl;
}(NSObject));
exports.CBPeripheralDelegateImpl = CBPeripheralDelegateImpl;
var CBCentralManagerDelegateImpl = (function (_super) {
    __extends(CBCentralManagerDelegateImpl, _super);
    function CBCentralManagerDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CBCentralManagerDelegateImpl.new = function () {
        return _super.new.call(this);
    };
    CBCentralManagerDelegateImpl.prototype.initWithCallback = function (owner, callback) {
        this._owner = owner;
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBCentralManagerDelegateImpl.initWithCallback ---- this._owner: " + this._owner);
        this._callback = callback;
        return this;
    };
    CBCentralManagerDelegateImpl.prototype.centralManagerDidConnectPeripheral = function (central, peripheral) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "----- CBCentralManagerDelegateImpl centralManager:didConnectPeripheral: " + peripheral);
        this._owner.get().onPeripheralConnected(peripheral);
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "----- CBCentralManagerDelegateImpl centralManager:didConnectPeripheral, let's discover service");
        peripheral.discoverServices(null);
    };
    CBCentralManagerDelegateImpl.prototype.centralManagerDidDisconnectPeripheralError = function (central, peripheral, error) {
        var UUID = peripheral.identifier.UUIDString;
        var cb = this._owner.get()._disconnectCallbacks[UUID];
        if (cb) {
            cb({
                UUID: peripheral.identifier.UUIDString,
                name: peripheral.name
            });
            delete this._owner.get()._disconnectCallbacks[UUID];
        }
        else {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "***** centralManagerDidDisconnectPeripheralError() no disconnect callback found *****");
        }
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBCentralManagerDelegate.centralManagerDidDisconnectPeripheralError ----", central, peripheral, error);
        this._owner.get().onPeripheralDisconnected(peripheral);
    };
    CBCentralManagerDelegateImpl.prototype.centralManagerDidFailToConnectPeripheralError = function (central, peripheral, error) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBCentralManagerDelegate.centralManagerDidFailToConnectPeripheralError ----", central, peripheral, error);
    };
    CBCentralManagerDelegateImpl.prototype.centralManagerDidDiscoverPeripheralAdvertisementDataRSSI = function (central, peripheral, advData, RSSI) {
        var UUIDString = peripheral.identifier.UUIDString;
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBCentralManagerDelegateImpl.centralManagerDidDiscoverPeripheralAdvertisementDataRSSI ---- " + peripheral.name + " @ " + UUIDString + " @ " + RSSI + " @ " + advData);
        this._owner.get().adddDiscoverPeripheral(peripheral);
        var advertismentData = new AdvertismentData(advData);
        var payload = {
            UUID: UUIDString,
            name: peripheral.name,
            localName: advertismentData.localName,
            RSSI: RSSI,
            advertismentData: advertismentData,
            state: this._owner.get()._getState(peripheral.state),
            manufacturerId: advertismentData.manufacturerId
        };
        this._owner.get()._advData[UUIDString] = advertismentData;
        if (this._owner.get()._onDiscovered) {
            this._owner.get()._onDiscovered(payload);
        }
        this._owner.get().sendEvent(Bluetooth.device_discovered_event, payload);
    };
    CBCentralManagerDelegateImpl.prototype.centralManagerDidUpdateState = function (central) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBCentralManagerDelegateImpl.centralManagerDidUpdateState: " + central.state);
        if (central.state === 2) {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.warning, "CBCentralManagerDelegateImpl.centralManagerDidUpdateState ---- This hardware does not support Bluetooth Low Energy.");
        }
        this._owner.get().state = central.state;
    };
    CBCentralManagerDelegateImpl.prototype.centralManagerWillRestoreState = function (central, dict) {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "CBCentralManagerDelegateImpl.centralManagerWillRestoreState ---- central: " + central + ", dict: " + dict);
    };
    CBCentralManagerDelegateImpl.ObjCProtocols = [CBCentralManagerDelegate];
    return CBCentralManagerDelegateImpl;
}(NSObject));
exports.CBCentralManagerDelegateImpl = CBCentralManagerDelegateImpl;
var AdvertismentData = (function () {
    function AdvertismentData(advData) {
        this.advData = advData;
    }
    Object.defineProperty(AdvertismentData.prototype, "manufacturerData", {
        get: function () {
            var data = this.advData.objectForKey(CBAdvertisementDataManufacturerDataKey);
            if (data) {
                return toArrayBuffer(data.subdataWithRange(NSMakeRange(2, data.length - 2)));
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "data", {
        get: function () {
            return toArrayBuffer(this.advData);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "manufacturerId", {
        get: function () {
            var data = this.advData.objectForKey(CBAdvertisementDataManufacturerDataKey);
            if (data) {
                var manufacturerIdBuffer = toArrayBuffer(data.subdataWithRange(NSMakeRange(0, 2)));
                return new DataView(manufacturerIdBuffer, 0).getUint16(0, true);
            }
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "txPowerLevel", {
        get: function () {
            return this.advData.objectForKey(CBAdvertisementDataTxPowerLevelKey) || Number.MIN_VALUE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "localName", {
        get: function () {
            return this.advData.objectForKey(CBAdvertisementDataLocalNameKey);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "flags", {
        get: function () {
            return -1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "serviceUUIDs", {
        get: function () {
            var result = [];
            var serviceUuids = this.advData.objectForKey(CBAdvertisementDataServiceUUIDsKey);
            if (serviceUuids) {
                for (var i = 0; i < serviceUuids.count; i++) {
                    result.push(serviceUuids[i].toString());
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "overtflow", {
        get: function () {
            var result = [];
            var serviceUuids = this.advData.objectForKey(CBAdvertisementDataOverflowServiceUUIDsKey);
            if (serviceUuids) {
                for (var i = 0; i < serviceUuids.count; i++) {
                    result.push(CBUUIDToString(serviceUuids[i]));
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "solicitedServices", {
        get: function () {
            var result = [];
            var serviceUuids = this.advData.objectForKey(CBAdvertisementDataSolicitedServiceUUIDsKey);
            if (serviceUuids) {
                for (var i = 0; i < serviceUuids.count; i++) {
                    result.push(CBUUIDToString(serviceUuids[i]));
                }
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "connectable", {
        get: function () {
            return this.advData.objectForKey(CBAdvertisementDataIsConnectable);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AdvertismentData.prototype, "serviceData", {
        get: function () {
            var result = {};
            var obj = this.advData.objectForKey(CBAdvertisementDataServiceDataKey);
            if (obj) {
                obj.enumerateKeysAndObjectsUsingBlock(function (key, data) {
                    result[CBUUIDToString(key)] = toArrayBuffer(data);
                });
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    return AdvertismentData;
}());
exports.AdvertismentData = AdvertismentData;
var _bluetoothInstance;
function getBluetoothInstance() {
    if (!_bluetoothInstance) {
        _bluetoothInstance = new Bluetooth();
    }
    return _bluetoothInstance;
}
exports.getBluetoothInstance = getBluetoothInstance;
function toArrayBuffer(value) {
    if (value === null) {
        return null;
    }
    return interop.bufferFromData(value);
}
exports.toArrayBuffer = toArrayBuffer;
function CBUUIDToString(uuid) {
    return uuid.toString().toLowerCase();
}
exports.CBUUIDToString = CBUUIDToString;
var Bluetooth = (function (_super) {
    __extends(Bluetooth, _super);
    function Bluetooth(restoreIdentifier) {
        if (restoreIdentifier === void 0) { restoreIdentifier = 'ns_bluetooth'; }
        var _this = _super.call(this) || this;
        _this.restoreIdentifier = restoreIdentifier;
        _this._centralDelegate = null;
        _this._centralManager = null;
        _this._discoverPeripherals = {};
        _this._connectedPeripherals = {};
        _this._connectCallbacks = {};
        _this._disconnectCallbacks = {};
        _this._advData = {};
        _this._onDiscovered = null;
        _this.findPeripheral = function (UUID) {
            var result = _this._connectedPeripherals[UUID] || _this._discoverPeripherals[UUID];
            if (!result) {
                var periphs = _this.centralManager.retrievePeripheralsWithIdentifiers([NSUUID.alloc().initWithUUIDString(UUID)]);
                if (periphs.count > 0) {
                    result = periphs.objectAtIndex(0);
                    _this.prepareConnectedPeripheralDelegate(result);
                }
            }
            return result;
        };
        _this.adddDiscoverPeripheral = function (peripheral) {
            var UUID = peripheral.identifier.UUIDString;
            if (!_this._discoverPeripherals[UUID]) {
                _this._discoverPeripherals[UUID] = peripheral;
            }
        };
        _this.findDiscoverPeripheral = function (UUID) {
            var result = _this._discoverPeripherals[UUID];
            if (!result) {
                var periphs = _this.centralManager.retrievePeripheralsWithIdentifiers([NSUUID.alloc().initWithUUIDString(UUID)]);
                if (periphs.count > 0) {
                    result = periphs.objectAtIndex(0);
                }
            }
            return result;
        };
        console.log("*** iOS Bluetooth Constructor *** " + restoreIdentifier);
        return _this;
    }
    Object.defineProperty(Bluetooth.prototype, "state", {
        get: function () {
            return this._state;
        },
        set: function (state) {
            if (this._state !== state) {
                this._state = state;
                this.sendEvent(bluetooth_common_1.BluetoothCommon.bluetooth_status_event, {
                    state: state === 2 ? 'unsupported' : state === 5 ? 'on' : 'off'
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bluetooth.prototype, "centralManager", {
        get: function () {
            var _this = this;
            if (!this._centralManager) {
                var options = new NSMutableDictionary([true], [CBCentralManagerOptionShowPowerAlertKey]);
                if (this.restoreIdentifier) {
                    options.setObjectForKey(this.restoreIdentifier, CBCentralManagerOptionRestoreIdentifierKey);
                }
                this._centralDelegate = CBCentralManagerDelegateImpl.new().initWithCallback(new WeakRef(this), function (obj) {
                    bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "---- centralDelegate ---- obj: " + obj);
                });
                this._centralManager = CBCentralManager.alloc().initWithDelegateQueueOptions(this._centralDelegate, null, options);
                setTimeout(function () {
                    _this.state = _this._centralManager.state;
                }, 100);
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, "this._centralManager: " + this._centralManager);
            }
            return this._centralManager;
        },
        enumerable: true,
        configurable: true
    });
    Bluetooth.prototype._getState = function (state) {
        if (state === 1) {
            return 'connecting';
        }
        else if (state === 2) {
            return 'connected';
        }
        else if (state === 0) {
            return 'disconnected';
        }
        else {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.warning, '_getState ---- Unexpected state, returning "disconnected" for state of', state);
            return 'disconnected';
        }
    };
    Bluetooth.prototype.prepareConnectedPeripheralDelegate = function (peripheral) {
        if (!peripheral.delegate) {
            var UUID = peripheral.identifier.UUIDString;
            var cb = this._connectCallbacks[UUID];
            delete this._connectCallbacks[UUID];
            var delegate = CBPeripheralDelegateImpl.new().initWithCallback(new WeakRef(this), cb);
            CFRetain(delegate);
            peripheral.delegate = delegate;
        }
    };
    Bluetooth.prototype.onPeripheralDisconnected = function (peripheral) {
        var UUID = peripheral.identifier.UUIDString;
        peripheral.delegate = null;
        delete this._connectedPeripherals[UUID];
    };
    Bluetooth.prototype.onPeripheralConnected = function (peripheral) {
        var UUID = peripheral.identifier.UUIDString;
        this.prepareConnectedPeripheralDelegate(peripheral);
        this._connectedPeripherals[UUID] = peripheral;
    };
    Bluetooth.prototype.isBluetoothEnabled = function () {
        var _this = this;
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'isBluetoothEnabled', !!this._centralManager);
        return Promise.resolve()
            .then(function () {
            if (!_this._centralManager) {
                _this.centralManager;
                return new Promise(function (resolve) { return setTimeout(resolve, 100); });
            }
            return null;
        })
            .then(function () {
            return new Promise(function (resolve, reject) {
                try {
                    var isEnabled = _this._isEnabled();
                    resolve(isEnabled);
                }
                catch (ex) {
                    bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'isBluetoothEnabled ----', ex);
                    reject(ex);
                }
            });
        });
    };
    Bluetooth.prototype.startScanning = function (arg) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this._discoverPeripherals = {};
                _this._onDiscovered = arg.onDiscovered;
                var services_1 = null;
                if (arg.filters) {
                    services_1 = [];
                    arg.filters.forEach(function (f) {
                        if (f.serviceUUID) {
                            services_1.push(CBUUID.UUIDWithString(f.serviceUUID));
                        }
                    });
                }
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'startScanning ---- services:', services_1);
                _this.centralManager.scanForPeripheralsWithServicesOptions(services_1, null);
                if (_this.scanningReferTimer) {
                    clearTimeout(_this.scanningReferTimer.timer);
                    _this.scanningReferTimer.resolve();
                }
                _this.scanningReferTimer = {};
                if (arg.seconds) {
                    _this.scanningReferTimer.timer = setTimeout(function () {
                        _this.centralManager.stopScan();
                        resolve();
                    }, arg.seconds * 1000);
                    _this.scanningReferTimer.resolve = resolve;
                }
                else {
                    resolve();
                }
            }
            catch (ex) {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'startScanning ---- error:', ex);
                reject(ex);
            }
        });
    };
    Bluetooth.prototype.enable = function () {
        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'enable ---- Not possible on iOS');
        return this.isBluetoothEnabled();
    };
    Bluetooth.prototype.isGPSEnabled = function () {
        return Promise.resolve(true);
    };
    Bluetooth.prototype.enableGPS = function () {
        return Promise.resolve();
    };
    Bluetooth.prototype.openBluetoothSettings = function (url) {
        return this.isBluetoothEnabled().then(function (isEnabled) {
            if (!isEnabled) {
                return Promise.resolve().then(function () {
                    var settingsUrl = NSURL.URLWithString(url || 'App-prefs:root=General&path=BLUETOOTH');
                    if (UIApplication.sharedApplication.canOpenURL(settingsUrl)) {
                        UIApplication.sharedApplication.openURLOptionsCompletionHandler(settingsUrl, null, function (success) {
                            if (success) {
                                return Promise.reject(undefined);
                            }
                            else {
                                return Promise.reject(bluetooth_common_1.BluetoothCommon.msg_cant_open_settings);
                            }
                        });
                    }
                });
            }
            return null;
        });
    };
    Bluetooth.prototype.stopScanning = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                _this.centralManager.stopScan();
                if (_this.scanningReferTimer) {
                    _this.scanningReferTimer.resolve && _this.scanningReferTimer.resolve();
                    clearTimeout(_this.scanningReferTimer.timer);
                    _this.scanningReferTimer = null;
                }
                resolve();
            }
            catch (ex) {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'stopScanning ---- error:', ex);
                reject(ex);
            }
        });
    };
    Bluetooth.prototype.connect = function (args) {
        try {
            if (!args.UUID) {
                return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'UUID' });
            }
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'connect ----', args.UUID);
            var peripheral = this.findDiscoverPeripheral(args.UUID);
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'connect ---- peripheral found', peripheral);
            if (!peripheral) {
                return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_no_peripheral, args: args });
            }
            else {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'connect ---- Connecting to peripheral with UUID:', args.UUID);
                this._connectCallbacks[args.UUID] = args.onConnected;
                this._disconnectCallbacks[args.UUID] = args.onDisconnected;
                this.centralManager.connectPeripheralOptions(peripheral, null);
                return Promise.resolve();
            }
        }
        catch (ex) {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'connect ---- error:', ex);
            return Promise.reject(ex);
        }
    };
    Bluetooth.prototype.disconnect = function (args) {
        try {
            if (!args.UUID) {
                return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'UUID' });
            }
            var peripheral = this.findPeripheral(args.UUID);
            if (!peripheral) {
                return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_no_peripheral, args: args });
            }
            else {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'disconnect ---- Disconnecting peripheral with UUID', args.UUID);
                if (peripheral.state !== 0) {
                    this.centralManager.cancelPeripheralConnection(peripheral);
                }
                return Promise.resolve();
            }
        }
        catch (ex) {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'disconnect ---- error:', ex);
            return Promise.reject(ex);
        }
    };
    Bluetooth.prototype.isConnected = function (args) {
        try {
            if (!args.UUID) {
                return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'UUID' });
            }
            var peripheral = this.findPeripheral(args.UUID);
            if (peripheral === null) {
                return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_no_peripheral, args: args });
            }
            else {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'isConnected ---- checking connection with peripheral UUID:', args.UUID);
                return Promise.resolve(peripheral.state === 2);
            }
        }
        catch (ex) {
            bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'isConnected ---- error:', ex);
            return Promise.reject(ex);
        }
    };
    Bluetooth.prototype.read = function (args) {
        return this._getWrapper(args, 2).then(function (wrapper) {
            return new Promise(function (resolve, reject) {
                try {
                    var delegate = wrapper.peripheral.delegate;
                    delegate.onReadCallbacks = delegate.onReadCallbacks || [];
                    delegate.onReadCallbacks.push(resolve);
                    wrapper.peripheral.readValueForCharacteristic(wrapper.characteristic);
                }
                catch (ex) {
                    bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'read ---- error:', ex);
                    reject(ex);
                }
            });
        });
    };
    Bluetooth.prototype.write = function (args) {
        var _this = this;
        if (!args.value) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'value' });
        }
        return this._getWrapper(args, 8).then(function (wrapper) {
            return new Promise(function (resolve, reject) {
                try {
                    var valueEncoded = _this.valueToNSData(args.value, args.encoding);
                    if (bluetooth_common_1.BluetoothUtil.debug) {
                        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'write:', args.value);
                    }
                    if (valueEncoded === null) {
                        return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_invalid_value, value: args.value });
                    }
                    var delegate = wrapper.peripheral.delegate;
                    delegate.onWriteCallbacks = delegate.onWriteCallbacks || [];
                    delegate.onWriteCallbacks.push(resolve);
                    wrapper.peripheral.writeValueForCharacteristicType(valueEncoded, wrapper.characteristic, 0);
                    if (bluetooth_common_1.BluetoothUtil.debug) {
                        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'write:', args.value, JSON.stringify(_this.valueToString(valueEncoded)));
                    }
                }
                catch (ex) {
                    bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'write ---- error:', ex);
                    return reject(ex);
                }
            });
        });
    };
    Bluetooth.prototype.writeWithoutResponse = function (args) {
        var _this = this;
        if (!args.value) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'value' });
        }
        return this._getWrapper(args, 4).then(function (wrapper) {
            try {
                var valueEncoded = _this.valueToNSData(args.value, args.encoding);
                if (valueEncoded === null) {
                    return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_invalid_value, value: args.value });
                }
                wrapper.peripheral.writeValueForCharacteristicType(valueEncoded, wrapper.characteristic, 1);
                if (bluetooth_common_1.BluetoothUtil.debug) {
                    bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'writeWithoutResponse:', args.value, JSON.stringify(_this.valueToString(valueEncoded)));
                }
                return null;
            }
            catch (ex) {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'writeWithoutResponse ---- error:', ex);
                return Promise.reject(ex);
            }
        });
    };
    Bluetooth.prototype.startNotifying = function (args) {
        return this._getWrapper(args, 16).then(function (wrapper) {
            try {
                var cb = args.onNotify ||
                    function (result) {
                        bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.info, 'startNotifying ---- No "onNotify" callback function specified for "startNotifying()"');
                    };
                var delegate = wrapper.peripheral.delegate;
                delegate.onNotifyCallback = cb;
                wrapper.peripheral.setNotifyValueForCharacteristic(true, wrapper.characteristic);
                return null;
            }
            catch (ex) {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'startNotifying ---- error:', ex);
                return Promise.reject(ex);
            }
        });
    };
    Bluetooth.prototype.stopNotifying = function (args) {
        var _this = this;
        return this._getWrapper(args, 16).then(function (wrapper) {
            try {
                var peripheral = _this.findPeripheral(args.peripheralUUID);
                peripheral.delegate.onNotifyCallback = null;
                peripheral.setNotifyValueForCharacteristic(false, wrapper.characteristic);
                return null;
            }
            catch (ex) {
                bluetooth_common_1.CLog(bluetooth_common_1.CLogTypes.error, 'stopNotifying ---- error:', ex);
                return Promise.reject(ex);
            }
        });
    };
    Bluetooth.prototype._isEnabled = function () {
        return this.state === 5;
    };
    Bluetooth.prototype._findService = function (UUID, peripheral) {
        for (var i = 0; i < peripheral.services.count; i++) {
            var service = peripheral.services.objectAtIndex(i);
            if (UUID.isEqual(service.UUID)) {
                return service;
            }
        }
        return null;
    };
    Bluetooth.prototype._findCharacteristic = function (UUID, service, property) {
        for (var i = 0; i < service.characteristics.count; i++) {
            var characteristic = service.characteristics.objectAtIndex(i);
            if (UUID.isEqual(characteristic.UUID)) {
                if (property && characteristic.properties) {
                    if (property === property) {
                        return characteristic;
                    }
                }
                else {
                    return characteristic;
                }
            }
        }
        return null;
    };
    Bluetooth.prototype._getWrapper = function (args, property) {
        if (!args.peripheralUUID) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'peripheralUUID' });
        }
        if (!args.serviceUUID) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'serviceUUID' });
        }
        if (!args.characteristicUUID) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_missing_parameter, type: 'characteristicUUID' });
        }
        var peripheral = this.findPeripheral(args.peripheralUUID);
        if (!peripheral) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_no_peripheral, args: args });
        }
        if (peripheral.state !== 2) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_peripheral_not_connected, args: args });
        }
        var serviceUUID = CBUUID.UUIDWithString(args.serviceUUID);
        var service = this._findService(serviceUUID, peripheral);
        if (!service) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_no_service, args: args });
        }
        var characteristicUUID = CBUUID.UUIDWithString(args.characteristicUUID);
        var characteristic = this._findCharacteristic(characteristicUUID, service, property);
        if (property === 16 && !characteristic) {
            characteristic = this._findCharacteristic(characteristicUUID, service, 32);
        }
        if (!characteristic) {
            characteristic = this._findCharacteristic(characteristicUUID, service, null);
        }
        if (!characteristic) {
            return Promise.reject({ msg: bluetooth_common_1.BluetoothCommon.msg_no_characteristic, args: args });
        }
        return Promise.resolve({
            peripheral: peripheral,
            service: service,
            characteristic: characteristic
        });
    };
    Bluetooth.prototype.nativeEncoding = function (encoding) {
        switch (encoding) {
            case 'utf-8':
                return NSUTF8StringEncoding;
            case 'latin2':
            case 'iso-8859-2':
                return NSISOLatin2StringEncoding;
            case 'shift-jis':
                return NSShiftJISStringEncoding;
            case 'iso-2022-jp':
                return NSISO2022JPStringEncoding;
            case 'euc-jp':
                return NSJapaneseEUCStringEncoding;
            case 'windows-1250':
                return NSWindowsCP1250StringEncoding;
            case 'windows-1251':
                return NSWindowsCP1251StringEncoding;
            case 'windows-1252':
                return NSWindowsCP1252StringEncoding;
            case 'windows-1253':
                return NSWindowsCP1253StringEncoding;
            case 'windows-1254':
                return NSWindowsCP1254StringEncoding;
            case 'utf-16be':
                return NSUTF16BigEndianStringEncoding;
            case 'utf-16le':
                return NSUTF16LittleEndianStringEncoding;
            default:
            case 'iso-8859-1':
            case 'latin1':
                return NSISOLatin1StringEncoding;
        }
    };
    Bluetooth.prototype.valueToNSData = function (value, encoding) {
        if (encoding === void 0) { encoding = 'iso-8859-1'; }
        var type = typeof value;
        if (type === 'string') {
            return NSString.stringWithString(value).dataUsingEncoding(this.nativeEncoding(encoding));
        }
        else if (type === 'number') {
            return NSData.dataWithData(new Uint8Array([value]).buffer);
        }
        else if (Array.isArray(value)) {
            return NSData.dataWithData(new Uint8Array(value).buffer);
        }
        else if (value instanceof ArrayBuffer) {
            return NSData.dataWithData(value);
        }
        return null;
    };
    Bluetooth.prototype.valueToString = function (value) {
        if (value instanceof NSData) {
            var data = new Uint8Array(interop.bufferFromData(value));
            var result_1 = [];
            data.forEach(function (v, i) { return (result_1[i] = v); });
            return result_1;
        }
        return value;
    };
    __decorate([
        bluetooth_common_1.bluetoothEnabled,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Bluetooth.prototype, "startScanning", null);
    __decorate([
        bluetooth_common_1.bluetoothEnabled,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Bluetooth.prototype, "stopScanning", null);
    __decorate([
        bluetooth_common_1.bluetoothEnabled,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Bluetooth.prototype, "connect", null);
    __decorate([
        bluetooth_common_1.bluetoothEnabled,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Bluetooth.prototype, "disconnect", null);
    __decorate([
        bluetooth_common_1.bluetoothEnabled,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], Bluetooth.prototype, "isConnected", null);
    __decorate([
        bluetooth_common_1.bluetoothEnabled,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Number]),
        __metadata("design:returntype", void 0)
    ], Bluetooth.prototype, "_getWrapper", null);
    return Bluetooth;
}(bluetooth_common_1.BluetoothCommon));
exports.Bluetooth = Bluetooth;
//# sourceMappingURL=bluetooth.ios.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _tesseractDelegate = null;
var OCR = (function () {
    function OCR() {
    }
    OCR.prototype.retrieveText = function (options) {
        return new Promise(function (resolve, reject) {
            try {
                if (!options.image) {
                    reject("no image specified");
                    return;
                }
                var lang = options.language || "eng";
                var tesseract = G8Tesseract.alloc().initWithLanguage(lang);
                _tesseractDelegate = G8TesseractDelegateImpl.new().initWithProgressHandler(options.onProgress);
                tesseract.delegate = _tesseractDelegate;
                if (options.whitelist) {
                    tesseract.charWhitelist = options.whitelist;
                }
                if (options.blacklist) {
                    tesseract.charBlacklist = options.blacklist;
                }
                tesseract.doSetImage(options.image.ios);
                if (tesseract.recognize()) {
                    resolve({
                        text: tesseract.recognizedText
                    });
                }
                else {
                    reject("Recognize failed, check the log for possible details.");
                }
            }
            catch (ex) {
                console.log("Error in ocr.retrieveText: " + ex);
                reject(ex);
            }
        });
    };
    return OCR;
}());
exports.OCR = OCR;
var G8TesseractDelegateImpl = (function (_super) {
    __extends(G8TesseractDelegateImpl, _super);
    function G8TesseractDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    G8TesseractDelegateImpl.new = function () {
        return _super.new.call(this);
    };
    G8TesseractDelegateImpl.prototype.initWithProgressHandler = function (progressHandler) {
        this.progressHandler = progressHandler;
        return this;
    };
    G8TesseractDelegateImpl.prototype.shouldCancelImageRecognitionForTesseract = function (tesseract) {
        return false;
    };
    G8TesseractDelegateImpl.prototype.progressImageRecognitionForTesseract = function (tesseract) {
        if (this.progressHandler !== undefined) {
            this.progressHandler(tesseract.progress);
        }
        else {
            console.log("Progress: " + tesseract.progress);
        }
    };
    return G8TesseractDelegateImpl;
}(NSObject));
G8TesseractDelegateImpl.ObjCProtocols = [G8TesseractDelegate];
//# sourceMappingURL=ocr.ios.js.map
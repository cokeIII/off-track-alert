"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var imageSource = require("tns-core-modules/image-source");
var image_zoom_common_1 = require("./image-zoom.common");
var fs = require("tns-core-modules/file-system");
var view_1 = require("tns-core-modules/ui/core/view");
var ImageZoom = (function (_super) {
    __extends(ImageZoom, _super);
    function ImageZoom() {
        return _super.call(this) || this;
    }
    ImageZoom.prototype.createNativeView = function () {
        this._image = UIImageView.new();
        this._image.clipsToBounds = true;
        var nativeView = UIScrollView.new();
        nativeView.addSubview(this._image);
        nativeView.zoomScale = this.zoomScale;
        nativeView.minimumZoomScale = this.minZoom;
        nativeView.maximumZoomScale = this.maxZoom;
        return nativeView;
    };
    ImageZoom.prototype.disposeNativeView = function () {
        this.delegate = null;
    };
    ImageZoom.prototype.onLayout = function (left, top, right, bottom) {
        _super.prototype.onLayout.call(this, left, top, right, bottom);
        this._image.frame = this.nativeView.bounds;
    };
    ImageZoom.prototype.onMeasure = function (widthMeasureSpec, heightMeasureSpec) {
        var nativeView = this.nativeView;
        if (nativeView) {
            var width = view_1.layout.getMeasureSpecSize(widthMeasureSpec);
            var height = view_1.layout.getMeasureSpecSize(heightMeasureSpec);
            this.setMeasuredDimension(width, height);
        }
    };
    ImageZoom.prototype.initNativeView = function () {
        this.delegate = UIScrollViewDelegateImpl.initWithOwner(new WeakRef(this));
        this.nativeView.delegate = this.delegate;
    };
    ImageZoom.prototype[image_zoom_common_1.stretchProperty.setNative] = function (value) {
        switch (value) {
            case 'aspectFit':
                this.nativeViewProtected.contentMode = 1;
                break;
            case 'aspectFill':
                this.nativeViewProtected.contentMode = 2;
                break;
            case 'fill':
                this.nativeViewProtected.contentMode = 0;
                break;
            case 'none':
            default:
                this.nativeViewProtected.contentMode = 9;
                break;
        }
    };
    ImageZoom.prototype[image_zoom_common_1.srcProperty.setNative] = function (src) {
        var _this = this;
        if (typeof src === 'string' && src.startsWith('res://')) {
            this._image.image = UIImage.imageNamed(src.replace('res://', ''));
        }
        else if (typeof src === 'object') {
            this._image.image = src.ios;
        }
        else if (typeof src === 'string' && src.startsWith('http')) {
            imageSource.fromUrl(src).then(function (source) {
                _this._image.image = source.ios;
            });
        }
        else if (typeof src === 'string' && src.startsWith('~')) {
            this._image.image = UIImage.imageWithContentsOfFile(fs.path.join(fs.knownFolders.currentApp().path, src.replace('~', '')));
        }
        else {
            this._image.image = UIImage.imageWithContentsOfFile(src);
        }
    };
    ImageZoom.prototype[image_zoom_common_1.stretchProperty.setNative] = function (stretch) {
        this._image.stretch = stretch;
    };
    ImageZoom.prototype[image_zoom_common_1.zoomScaleProperty.setNative] = function (scale) {
        if (this.nativeView) {
            this.nativeView.zoomScale = scale;
        }
    };
    ImageZoom.prototype[image_zoom_common_1.minZoomScaleProperty.setNative] = function (scale) {
        if (this.nativeView) {
            this.nativeView.minimumZoomScale = scale;
        }
    };
    ImageZoom.prototype[image_zoom_common_1.maxZoomScaleProperty.setNative] = function (scale) {
        if (this.nativeView) {
            this.nativeView.maximumZoomScale = scale;
        }
    };
    return ImageZoom;
}(image_zoom_common_1.ImageZoomBase));
exports.ImageZoom = ImageZoom;
var UIScrollViewDelegateImpl = (function (_super) {
    __extends(UIScrollViewDelegateImpl, _super);
    function UIScrollViewDelegateImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UIScrollViewDelegateImpl.initWithOwner = function (owner) {
        var delegate = new UIScrollViewDelegateImpl();
        delegate.owner = owner;
        return delegate;
    };
    UIScrollViewDelegateImpl.prototype.viewForZoomingInScrollView = function (scrollView) {
        var owner = this.owner.get();
        return owner._image;
    };
    UIScrollViewDelegateImpl.ObjCProtocols = [UIScrollViewDelegate];
    return UIScrollViewDelegateImpl;
}(NSObject));
exports.UIScrollViewDelegateImpl = UIScrollViewDelegateImpl;
//# sourceMappingURL=image-zoom.ios.js.map